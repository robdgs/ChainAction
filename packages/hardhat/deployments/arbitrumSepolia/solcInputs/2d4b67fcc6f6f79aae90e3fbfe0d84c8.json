{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/PetitionPlatform.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract PetitionPlatform {\n\t//EVENTS\n\t//petition created\n\tevent PetitionCreated(uint256 indexed petitionId, address indexed creator, string title, string description, uint256 goalSignatures);\n\t//petition signed\n\tevent PetitionSigned(uint256 indexed petitionId, address indexed signer);\n\t//petition goal reached\n\tevent PetitionGoalReached(uint256 indexed petitionId, address indexed creator, uint256 signatures, uint256 goalSignatures);\n\t//petition ended\n\tevent PetitionEnded(uint256 indexed petitionId, address indexed creator, uint256 signatures, uint256 goalSignatures);\n\t//donation made\n\tevent DonationMade(uint256 indexed petitionId, address indexed donor, uint256 amount);\n\t//found claimed\n\tevent FundsClaimed(uint256 indexed petitionId, address indexed creator, uint256 amount);\n\n\t//ERRORS\n\t//empty string\n\terror EmptyStringError(string);\n\t//petition ended\n\terror PetitionEndedError();\n\t//petition in progress\n\terror PetitionInProgressError();\n\t//petition not exists\n\terror PetitionNotExistsError();\n\t//petition not signed\n\terror PetitionNotSignedError();\n\t//petition already signed\n\terror PetitionAlreadySignedError();\n\t//invalid amount\n\terror InvalidAmountError(string);\n\t//not petition administrator\n\terror NotPetitionAdministratorError();\n\t//no funds to claim\n\terror NoFundsToClaimError();\n\n\t//STATE VARIABLES\n\t//petition id counter\n\tuint256 public petitionId;\n\n\t//token address\n\taddress public tokenAddress;\n\n\t//petition struct\n\tstruct Petition {\n\t\taddress creator;\n\t\tstring title;\n\t\tstring description;\n\t\tuint256 signatures;\n\t\tuint256 goalSignatures;\n\t\tuint256 founds;\n\t\tmapping(address => bool) signers;\n\t\tbool ended;\n\t}\n\n\t//petition mapping\n\tmapping(uint256 => Petition) public petitions;\n\n\t//users petitions created mapping\n\tmapping(address => uint256[]) public usersPetitionsCreated;\n\n\t//user petitions signed mapping\n\tmapping(address => uint256[]) public usersPetitionsSigned;\n\n\t//MODIFIERS\n\t//only creator\n\tmodifier onlyCreator(uint256 _petitionId) {\n\t\tif (msg.sender != petitions[_petitionId].creator) {\n\t\t\trevert NotPetitionAdministratorError();\n\t\t}\n\t\t_;\n\t}\n\n\t//only signed\n\tmodifier onlySigned(uint256 _petitionId) {\n\t\tif (!petitions[_petitionId].signers[msg.sender]) {\n\t\t\trevert PetitionNotSignedError();\n\t\t}\n\t\t_;\n\t}\n\n\t//only not signed\t\n\tmodifier onlyNotSigned(uint256 _petitionId) {\n\t\tif (petitions[_petitionId].signers[msg.sender]) {\n\t\t\trevert PetitionAlreadySignedError();\n\t\t}\n\t\t_;\n\t}\n\n\t//only petition exists\n\tmodifier onlyPetitionExists(uint256 _petitionId) {\n\t\tif (petitions[_petitionId].goalSignatures == 0) {\n\t\t\trevert PetitionNotExistsError();\n\t\t}\n\t\t_;\n\t}\n\n\t//only petition ended\n\tmodifier onlyPetitionEnded(uint256 _petitionId) {\n\t\tif (!petitions[_petitionId].ended) {\n\t\t\trevert PetitionInProgressError();\n\t\t}\n\t\t_;\n\t}\n\n\t//only petition in rogress\n\tmodifier onlyPetitionInProgress(uint256 _petitionId) {\n\t\tif (petitions[_petitionId].ended) {\n\t\t\trevert PetitionEndedError();\n\t\t}\n\t\t_;\n\t}\n\n\t//CONSTRUCTOR\n\tconstructor(address _tokenAddress) {\n\t\ttokenAddress = _tokenAddress;\n\t\tpetitionId = 0;\n\t}\n\n\t//FUNCTIONS\n\t//create petition\n\tfunction createPetition(string memory _title, string memory _description, uint256 _goalSignatures) public returns (uint256) {\n\t\tif (bytes(_title).length == 0 || bytes(_description).length == 0) {\n\t\t\trevert EmptyStringError(\"empty string error\");\n\t\t}\n\t\tif (_goalSignatures <= 0) {\n\t\t\trevert InvalidAmountError(\"invalid amount error\");\n\t\t}\n\t\tpetitionId++;\n\t\tpetitions[petitionId].creator = msg.sender;\n\t\tpetitions[petitionId].title = _title;\n\t\tpetitions[petitionId].description = _description;\n\t\tpetitions[petitionId].goalSignatures = _goalSignatures;\n\t\tusersPetitionsCreated[msg.sender].push(petitionId);\n\t\temit PetitionCreated(petitionId, msg.sender, _title, _description, _goalSignatures);\n\t\treturn petitionId; \n\t}\n\n\t//sign petition\n\tfunction signPetition(uint256 _petitionId) public onlyPetitionExists(_petitionId) onlyPetitionInProgress(_petitionId) onlyNotSigned(_petitionId) {\n\t\tPetition storage _petition = petitions[_petitionId];\n\t\t_petition.signers[msg.sender] = true;\n\t\t_petition.signatures++;\n\t\tusersPetitionsSigned[msg.sender].push(_petitionId);\n\t\temit PetitionSigned(_petitionId, msg.sender);\n\t\tif (_petition.signatures >= _petition.goalSignatures) {\n\t\t\t//_petition.ended = true;\n\t\t\temit PetitionGoalReached(_petitionId, _petition.creator, _petition.signatures, _petition.goalSignatures);\n\t\t}\n\t}\n\n\t//donate to petition\n\tfunction donateToPetition(uint256 _petitionId, uint256 _amount) public onlyPetitionExists(_petitionId) onlyPetitionInProgress(_petitionId) onlySigned(_petitionId) {\n\t\tif (_amount <= 0) {\n\t\t\trevert InvalidAmountError(\"inv amount error\");\n\t\t}\n\t\tbool success = IERC20(tokenAddress).transferFrom(msg.sender, address(this), _amount);\n\t\trequire(success, \"Transfer failed\");\n\t\tPetition storage _petition = petitions[_petitionId];\n\t\t_petition.founds += _amount;\n\t\temit DonationMade(_petitionId, msg.sender, _amount);\n\t}\n\n\t//claim petition founds\n\tfunction claimFunds(uint256 _petitionId) public onlyPetitionExists(_petitionId) onlyPetitionEnded(_petitionId) onlyCreator(_petitionId) {\n\t\tif (petitions[_petitionId].founds <= 0) {\n\t\t\trevert NoFundsToClaimError();\n\t\t}\n\t\tbool success = IERC20(tokenAddress).transfer(msg.sender, petitions[_petitionId].founds);\n\t\trequire(success, \"Transfer failed\");\n\t\tpetitions[_petitionId].founds = 0;\n\t\temit FundsClaimed(_petitionId, msg.sender, petitions[_petitionId].founds);\n\t}\n\n\t//close petition\n\tfunction closePetition(uint256 _petitionId) public onlyPetitionExists(_petitionId) onlyCreator(_petitionId) onlyPetitionInProgress(_petitionId) {\n\t\tpetitions[_petitionId].ended = true;\n\t\temit PetitionEnded(_petitionId, petitions[_petitionId].creator, petitions[_petitionId].signatures, petitions[_petitionId].goalSignatures);\n\t}\n\n\t//GETTERS\n\t//get max petitions id\n\tfunction getMaxPetitionsIds() public view returns (uint256) {\n\t\treturn petitionId;\n\t}\n\n\t//get petition creator\n\tfunction getPetitionCreator(uint256 _petitionId) public view returns (address) {\n\t\treturn petitions[_petitionId].creator;\n\t}\n\n\t//get petition title\n\tfunction getPetitionTitle(uint256 _petitionId) public view returns (string memory) {\n\t\treturn petitions[_petitionId].title;\n\t}\n\n\t//get petition description\n\tfunction getPetitionDescription(uint256 _petitionId) public view returns (string memory) {\n\t\treturn petitions[_petitionId].description;\n\t}\n\n\t//get petition signatures\n\tfunction getPetitionSignatures(uint256 _petitionId) public view returns (uint256) {\n\t\treturn petitions[_petitionId].signatures;\n\t}\n\n\t//get petition goal signatures\n\tfunction getPetitionGoalSignatures(uint256 _petitionId) public view returns (uint256) {\n\t\treturn petitions[_petitionId].goalSignatures;\n\t}\n\n\t//get petition founds\n\tfunction getPetitionFounds(uint256 _petitionId) public view returns (uint256) {\n\t\treturn petitions[_petitionId].founds;\n\t}\n\n\t//get petition ended\n\tfunction getPetitionEnded(uint256 _petitionId) public view returns (bool) {\n\t\treturn petitions[_petitionId].ended;\n\t}\n\n\t/*//get petition signers\n\tfunction getPetitionSigners(uint256 _petitionId) public view returns (address[] memory) {\n\t\t\n\t}*/\n\n\t//get user petitions created\n\tfunction getUserPetitionsCreated(address _user) public view returns (uint256[] memory) {\n\t\treturn usersPetitionsCreated[_user];\n\t}\n\n\t//get user petitions signed\n\tfunction getUserPetitionsSigned(address _user) public view returns (uint256[] memory) {\n\t\treturn usersPetitionsSigned[_user];\n\t}\n\n\t//SETTERS\n\t//set petition goal signatures\n\tfunction setPetitionGoalSignatures(uint256 _petitionId, uint256 _goalSignatures) public onlyPetitionExists(_petitionId) onlyCreator(_petitionId) onlyPetitionInProgress(_petitionId) {\n\t\tpetitions[_petitionId].goalSignatures = _goalSignatures;\n\t}\n\n\t//set petition description\n\tfunction setPetitionDescription(uint256 _petitionId, string memory _description) public onlyPetitionExists(_petitionId) onlyCreator(_petitionId) onlyPetitionInProgress(_petitionId) {\n\t\tpetitions[_petitionId].description = _description;\n\t}\n\n}\n\n//0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9 contract address\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}